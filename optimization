import numpy as np
from pathlib import Path
import os
import cv2
import pickle
from pycocotools.coco import COCO

import skimage.transform
import numpy as np
from PIL import Image

#https://blog.csdn.net/qq_38048756/article/details/103208834
domain = 'train/'

dataroot = '/home/hwjin/FLIR/yolov3/FLIR_people_select' + os.sep

jsonroot = '/home/hwjin/FLIR/FLIR_ADAS_1_3' + os.sep
jsonfile = jsonroot + domain + 'thermal_annotations.json'
coco = COCO(jsonfile)

# path to store file
# path =

#domain = 'train/'

#generate patches for a single image 
def valid_ann(ann):
    if ann['category_id'] == 1 and ann['bbox'][3]>120:
        return True
    else:
        return False

def generate_patch(idn,path_in_str,s,sig,angle,centers):
    imInfo = coco.imgs[idn]
    annIds = coco.getAnnIds(imgIds=imInfo['id']) #get annotations id of this image
    anns = coco.loadAnns(annIds)
    img = cv2.imread(path_in_str)
    for person_ann in anns:
        print(person_ann )
        if valid_ann(person_ann) == True:
            x,y,w,h = patch_range(person_ann['bbox'],sig)
            cv2.rectangle(img, (x,y), (x+w,y+h), (255,0,0), 2)
            box_size = (w,h)
            patch = multiple_gussians(centers,s,sig,box_size,x,y)
            print(patch.shape)
            im_p = patched_image(img,patch,x,y,w,h)

            name = path_in_str[-15:-5]
            save_path = 'patched_image/train/'+ name

            patch_rotate = rand_rotate(patch,angle)
            im_p = patched_image(img, patch_rotate,x,y,w,h)
            im = Image.fromarray(np.uint8(im_p))
            im.save(save_path + '_r.jpeg','JPEG')

            patch_bright = adjust_contrast_bri(contrast,brightness,patch)
            im_p = patched_image(img, patch_bright ,x,y,w,h)
            im = Image.fromarray(np.uint8(im_p))
            im.save(save_path + '_r.jpeg','JPEG')
        else:
            continue

        
#generate patches for image in a domain
def generate_patches(centers,domain,s,sig,rotate_ran):
    if domain == 'train/':
        with open ('FLIR_people_select_trainIdx', 'rb') as fp:
            idxs = pickle.load(fp)
    elif domain =='val/':
        with open ('FLIR_people_select_valIdx', 'rb') as fp:
            idxs = pickle.load(fp)
    #patch_sum = patch.multiple_gussians(centers)
    path = dataroot + domain 
    pathlist = Path(path).rglob('*.jpeg')
    for path,idn in zip(pathlist,idxs):
        path_in_str = str(path)
        generate_patch(idn,path_in_str,s,sig,rotate_ran,centers)
        #save image in FLIR/patched_image/train
    
    #file path of the patched images  
    return 

    
def yolov3_scores(centers):
    patch_images = generate_patches(centers) #path to folders store the images
    ...
    return scores # a list
def faster_rcnn_scores():
    generate_patches(centers)
    ...
    return scores # alist
def loss_function(centers):
    detector1_scores = yolov3_scores(centers)
    #detector2_scores = faster_rcnn_scores(centers)
    #L1_detector = 

def patch_range(bbox,sigma):
    #gaussian distribution beome zero after 2*sd
    sigma_d = 2*sigma
    #wb,hb are the highet width of the bonding box
    xbb,ybb,wbb,hbb = bbox
    #the patch box
    sigma = int(sigma)
    if sigma:
        x,y,w,h = int(xbb-sigma_d),int(np.floor(ybb+hbb/7))-int(sigma_d),int(wbb+2*sigma_d),int(np.floor(hbb/5)+2*sigma_d)
    elif sigma==0:
        x,y,w,h = int(xbb),int(np.floor(ybb+hbb/7)),int(wbb),int(np.floor(hbb/5))
    return x,y,w,h

def multiple_gussians(centers, s, sig, box_size,x,y):
    zeros = np.zeros((box_size[1],box_size[0]))
    patch_sum = np.repeat(zeros[...,np.newaxis],3,axis = 2)
    for idx in range(0,len(centers),2):
        xc = centers[idx]-y
        yc = centers[idx+1]-x
        print(xc,yc)
        patch = gaussian(xc,yc, s, sig, box_size)
        patch_sum = patch_sum + patch
    return patch_sum
def gaussian(xc,yc, s, sig, box_size): #xc, yc are coordinates respective to the bbox, xc<w;yc<h
    patch_w = box_size[1]
    patch_h = box_size[0]
    gus_patch = np.zeros((patch_w,patch_h))
    for xb in range(patch_w):
        for yb in range(patch_h):            
            r = (xb-xc)**2+(yb-yc)**2
            gus_patch[xb][yb] = s*np.exp(-r/(2*sig**2))
    gus_patch = np.repeat(gus_patch[...,np.newaxis],3,axis = 2)
    return gus_patch

def patched_image(im,patch,x,y,w,h):
    im_p = im.astype('float')
    im_p[y:y+h,x:x+w,:] = [a + b for a, b in zip(im[y:y+h,x:x+w,:], patch)]
    #im = np.array(im)
    #im_dp = im.astype(float)
    #im_dp[y:y+h,x:x+w,:] = im_dp[y:y+h,x:x+w,:] + patch
    #im_dp = [a + b for a, b in zip(im[y:y+h,x:x+w,:], patch)]
    return im_p

def adjust_contrast_bri(contrast,brightness,img_ori):
    img = img_ori
    img = np.int16(img)
    img = img * (contrast/127+1) - contrast + brightness
    img = np.clip(img, 0, 255)
    img = np.uint8(img)
    return img

# rndomly rorate the image within certain angle
def rand_rotate(patch,angle_ran):
    angle1 = np.random.randint(-angle_ran,angle_ran)
    rotated_image1 = skimage.transform.rotate(patch,angle = angle1)
    return rotated_image1


### In Zip, whether consistent???


names = list()
def generate_patch(path):
    pathlist = Path(path).rglob('*.jpeg')
    for path in pathlist:
        path_in_str = str(path)
        print(path)
        names.append(path_in_str)

dataroot = '/home/hwjin/FLIR/yolov3/FLIR_people_select/' + os.sep
generate_patch(dataroot + 'val/')


centers = [244,299,260,325,275,360]

s = 10
sig = 5.07
rotate_ran = 20

contrast = 30
brightness = 50

generate_patches(centers,domain,s,sig,rotate_ran)

